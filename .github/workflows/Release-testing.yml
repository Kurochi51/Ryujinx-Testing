on:
  workflow_dispatch:
    inputs: {}
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/*'
      - '.github/ISSUE_TEMPLATE/**'
      - '*.yml'
      - 'README.md'

name: Build

env:
  POWERSHELL_TELEMETRY_OPTOUT: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  RYUJINX_BASE_VERSION: "1.1"
  RYUJINX_TARGET_RELEASE_CHANNEL_NAME: "main"
  RYUJINX_TARGET_RELEASE_CHANNEL_OWNER: "Kurochi51"
  RYUJINX_TARGET_RELEASE_CHANNEL_REPO: "Ryujinx-Testing"

jobs:
  tag:
    name: Create tag
    runs-on: ubuntu-latest
    steps:
      - name: Get version info
        id: version_info
        run: |
          echo "build_version=${{ env.RYUJINX_BASE_VERSION }}.0${{ github.run_number }}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create tag
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ steps.version_info.outputs.build_version }}',
              sha: context.sha
            })
  release:
      name: ${{ matrix.OS_NAME }} (${{ matrix.configuration }})
      runs-on: ${{ matrix.os }}
      timeout-minutes: 45
      strategy:
        matrix:
          os: [ubuntu-latest, windows-latest]
          configuration: [Debug, Release]
          include:
          - os: ubuntu-latest
            OS_NAME: Linux x64
            DOTNET_RUNTIME_IDENTIFIER: linux-x64
            RELEASE_ZIP_OS_NAME: linux_x64
            
          - os: windows-latest
            OS_NAME: Windows x64
            DOTNET_RUNTIME_IDENTIFIER: win10-x64
            RELEASE_ZIP_OS_NAME: win_x64

        fail-fast: false
      steps:
        - uses: actions/checkout@v3
        
        - uses: actions/setup-dotnet@v3
          with:
            global-json-file: global.json
            
        - name: Get git short hash
          id: git_short_hash
          run: echo "result=$(git rev-parse --short "${{ github.sha }}")" >> $GITHUB_OUTPUT
          shell: bash
          
        - name: Get version info
          id: version_info
          run: |
            echo "build_version=${{ env.RYUJINX_BASE_VERSION }}.0${{ github.run_number }}" >> $GITHUB_OUTPUT
            echo "git_short_hash=$(git rev-parse --short "${{ github.sha }}")" >> $GITHUB_OUTPUT
          shell: bash
          
        - name: Configure for testing
          run: |
            sed -r --in-place 's/\%\%RYUJINX_BUILD_VERSION\%\%/${{ steps.version_info.outputs.build_version }}/g;' src/Ryujinx.Common/ReleaseInformation.cs
            sed -r --in-place 's/\%\%RYUJINX_BUILD_GIT_HASH\%\%/${{ steps.version_info.outputs.git_short_hash }}/g;' src/Ryujinx.Common/ReleaseInformation.cs
            sed -r --in-place 's/\%\%RYUJINX_TARGET_RELEASE_CHANNEL_NAME\%\%/${{ env.RYUJINX_TARGET_RELEASE_CHANNEL_NAME }}/g;' src/Ryujinx.Common/ReleaseInformation.cs
            sed -r --in-place 's/\%\%RYUJINX_TARGET_RELEASE_CHANNEL_OWNER\%\%/${{ env.RYUJINX_TARGET_RELEASE_CHANNEL_OWNER }}/g;' src/Ryujinx.Common/ReleaseInformation.cs
            sed -r --in-place 's/\%\%RYUJINX_TARGET_RELEASE_CHANNEL_REPO\%\%/${{ env.RYUJINX_TARGET_RELEASE_CHANNEL_REPO }}/g;' src/Ryujinx.Common/ReleaseInformation.cs
          shell: bash

        - name: Create output dir
          run: "mkdir release_output"
          
        - name: Publish Ryujinx Debug
          if: matrix.configuration == 'Debug'
          run: |
            dotnet publish -c "${{ matrix.configuration }}" -r "${{ matrix.DOTNET_RUNTIME_IDENTIFIER }}" -o ./publish_gtk/publish -p:Version="${{ steps.version_info.outputs.build_version }}" -p:SourceRevisionId="${{ steps.version_info.outputs.git_short_hash }}" src/Ryujinx --self-contained true
            dotnet publish -c "${{ matrix.configuration }}" -r "${{ matrix.DOTNET_RUNTIME_IDENTIFIER }}" -o ./publish_ava/publish -p:Version="${{ steps.version_info.outputs.build_version }}" -p:SourceRevisionId="${{ steps.version_info.outputs.git_short_hash }}" src/Ryujinx.Ava --self-contained true

        - name: Publish Ryujinx Release
          if: matrix.configuration == 'Release'
          run: |
            dotnet publish -c "${{ matrix.configuration }}" -r "${{ matrix.DOTNET_RUNTIME_IDENTIFIER }}" -o ./publish_gtk/publish -p:Version="${{ steps.version_info.outputs.build_version }}" -p:SourceRevisionId="${{ steps.version_info.outputs.git_short_hash }}" -p:DebugType=embedded -p:ExtraDefineConstants=DISABLE_UPDATER src/Ryujinx --self-contained true
            dotnet publish -c "${{ matrix.configuration }}" -r "${{ matrix.DOTNET_RUNTIME_IDENTIFIER }}" -o ./publish_ava/publish -p:Version="${{ steps.version_info.outputs.build_version }}" -p:SourceRevisionId="${{ steps.version_info.outputs.git_short_hash }}" -p:DebugType=embedded -p:ExtraDefineConstants=DISABLE_UPDATER src/Ryujinx.Ava --self-contained true
        
        - name: Packing Windows builds
          if: matrix.os == 'windows-latest'
          run: |
            pushd publish_gtk
            7z a ../release_output/ryujinx-${{ matrix.configuration }}-${{ steps.version_info.outputs.build_version }}-${{ matrix.RELEASE_ZIP_OS_NAME }}.zip publish
            popd
            pushd publish_ava
            7z a ../release_output/test-ava-ryujinx-${{ matrix.configuration }}-${{ steps.version_info.outputs.build_version }}-${{ matrix.RELEASE_ZIP_OS_NAME }}.zip publish
            popd
          shell: bash
          
        - name: Packing Linux builds
          if: matrix.os == 'ubuntu-latest'
          run: |
            pushd publish_gtk
            chmod +x publish/Ryujinx.sh publish/Ryujinx
            tar -czvf ../release_output/ryujinx-${{ matrix.configuration }}-${{ steps.version_info.outputs.build_version }}-${{ matrix.RELEASE_ZIP_OS_NAME }}.tar.gz publish
            popd
            pushd publish_ava
            chmod +x publish/Ryujinx.sh publish/Ryujinx.Ava
            tar -czvf ../release_output/test-ava-ryujinx-${{ matrix.configuration }}-${{ steps.version_info.outputs.build_version }}-${{ matrix.RELEASE_ZIP_OS_NAME }}.tar.gz publish
            popd
          shell: bash
          
        - name: Pushing new release
          uses: ncipollo/release-action@v1.12.0
          with:
            name: ${{ steps.version_info.outputs.build_version }}
            artifacts: "release_output/*.zip,release_output/*.tar.gz"
            tag: ${{ steps.version_info.outputs.build_version }}
            body: "Are you lost? This is no place to be in."
            omitBodyDuringUpdate: true
            allowUpdates: true
            replacesArtifacts: true
            owner: ${{ env.RYUJINX_TARGET_RELEASE_CHANNEL_OWNER }}
            repo: ${{ env.RYUJINX_TARGET_RELEASE_CHANNEL_REPO }}
            token: ${{ secrets.RELEASE_TOKEN }}
